AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  CompanyCustomerName:
    Type: String
    Description: (Required) Name of the Customer. This information will be added for the email notifications.
  EmailforNotifications:
    Type: String
    Description: (Required) Subscribe this email to the SNS Topic. You will be sent a confirmation email on creation.
    AllowedPattern: ^([^.@]+)(\.[^.@]+)*@([^.@]+\.)+([^.@]+)$
  AllowedEmailDomain:
    Type: String
    Description: (Required) Which emails or domains are allowed to start/stop the SAP systems? You can provide multiple emails or domains separated by commas, for example, "max.mustermann@gmail.de,nbasics.de."
  S3BucketName:
    Type: String
    Description: (Required) Provide a name for the S3 Bucket where the received emails are 
    AllowedPattern: ^[a-z0-9.-]{3,63}$
  SenderAccountID:
    Type: String
    Description: (Required) Account Number from the Sender (SES) Account
    Default: ''
  SSMStopStartStackPath:
    Type: String
    Description: (Required) S3 HTTPS URL from SMStopStartSAP.yaml File
    Default: ''  

Resources:
  SSMStopStartStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Ref SSMStopStartStackPath
      Parameters:
        CustomerName: !Ref CompanyCustomerName
        EmailforNotification: !Ref EmailforNotifications
  S3Bucket:
    Type: "AWS::S3::Bucket"
    DependsOn: SAPStartStopLambdaFunction
    Properties:
      BucketName: !Ref S3BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  - Name: "prefix"
                    Value: "incoming-email/"
            Function: !GetAtt SAPStartStopLambdaFunction.Arn
  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    DependsOn: S3Bucket
    Properties:
      Bucket: !Ref S3BucketName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ses.amazonaws.com"
            Action: "s3:PutObject"
            Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"
            Condition:
              StringLike:
                "aws:Referer": !Ref SenderAccountID
  SAPStartStopLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "SAPStartStop"
      Runtime: "python3.8"
      Handler: "index.lambda_handler"
      Role: !GetAtt SAPStartStopExecutionRole.Arn
      Environment:
        Variables:
          CUSTOMER_NAME: !Ref CompanyCustomerName
          VALID_EMAIL_ADDRESS: !Ref AllowedEmailDomain
          UPLOAD_BUCKET: !Ref S3BucketName
          SNS_TOPIC_ARN: !GetAtt SSMStopStartStack.Outputs.SNSTopic
          SSM_DOCUMENT_NAME: !GetAtt SSMStopStartStack.Outputs.SapSsmDocument
      Code:
        ZipFile: |
          from datetime import datetime
          import os
          import json
          import boto3
          import email
          import re
          from email.message import Message


          s3_bucket = boto3.resource("s3").Bucket(os.environ['UPLOAD_BUCKET'])
          sns = boto3.client("sns")
          sns_topic_arn = os.environ["SNS_TOPIC_ARN"]
          customer_name = os.environ["CUSTOMER_NAME"]
          ssm_document_name = os.environ["SSM_DOCUMENT_NAME"]
          ssm = boto3.client('ssm')
          ec2 = boto3.resource('ec2')

          def lambda_handler(event, context):
              try:
                  print(event)
                  object_key = event['Records'][0]['s3']['object']['key']
                  print("Load email from S3: " + object_key)
                  msg = load_email_from_s3(object_key)
                  check_if_validated_sender(msg)
                  str_date = datetime.now().strftime("%Y%d%m%H%M%S")
                  type_of_email = get_type(msg)
                  print("Type: " + type_of_email)
              finally:
                  delete_object_from_s3(object_key)


          def load_email_from_s3(key) -> Message:
              s3 = boto3.client("s3")
              response = s3.get_object(Bucket=os.environ['UPLOAD_BUCKET'], Key=key)
              body = response["Body"].read()
              msg = email.message_from_bytes(body)
              return msg


          def check_if_validated_sender(msg):
              email_list = os.environ.get("VALID_EMAIL_ADDRESS").replace(' ', '').split(',')
              domains = []
              email_addresses = []

              for item in email_list:
                  if '@' in item:
                      email_addresses.append(item.lower())
                  else:
                      domains.append(item.lower())

              from_email = msg["From"].split("<")[-1].split(">")[0].lower()
              print(f"Validate email if sender {from_email} in {email_list}")

              if any(from_email.endswith(domain) for domain in domains) or from_email in email_addresses:
                  print("Email is sent from a valid domain or email address.")
              else:
                  message = f"Email {from_email} is not validated for SAP Start Stop Automation at {customer_name}"
                  sns.publish(TopicArn=sns_topic_arn, Message=message)
                  print(f"Sent SNS message: {message}")
                  raise Exception(f"Email: {from_email} not validated")



          def get_type(msg):
              subject_from_mail = msg["Subject"]
              from_email = msg["From"].split("<")[-1].split(">")[0].lower()
              
              # Search for "start" and "stop" using regular expressions
              start_stop_matches = re.findall(r"(?:\bstart\b|\bstopp\b|\bstop\b)", subject_from_mail, re.IGNORECASE)
              
              # Search for a word with exactly three characters
              find_sid_matches = re.findall(r"\b\w{3}\b", subject_from_mail)
              
              # Store the start_stop_matches in separate variables
              start_stop_word = start_stop_matches[0] if start_stop_matches else None
              find_sid = find_sid_matches[0] if find_sid_matches else None
              
              print(f"Subject from Mail: {subject_from_mail}")
              print(f"start_stop_word: {start_stop_word}")
              print(f"find_sid: {find_sid}")

              if not start_stop_word or not find_sid:
                  message = f"No findings for start/stop words and SID for SAP Start Stop Automation from {customer_name}. Verwendeter Betreff: {subject_from_mail}"
                  sns.publish(TopicArn=sns_topic_arn, Message=message)
                  print(f"Sent SNS message: {message}")
                  raise "No findings for start/stop words or SID in the subject"
              
              # Convert start_stop_word to "Start" or "Stop"
              if start_stop_word == "start":
                  start_stop_word = "Start"
              elif start_stop_word in ["stop", "stopp"]:
                  start_stop_word = "Stop"
              
              response = ssm.start_automation_execution(
                  DocumentName=ssm_document_name,
                  DocumentVersion='$DEFAULT',
                  Parameters={    
                          "Operation": [start_stop_word],
                          "SID" : [find_sid],

                  }
              )
              
              # Find the EC2 instance with the specified tag key
              realated_instances = ec2.instances.filter(Filters=[{'Name': 'tag-key', 'Values': [find_sid + ":related"]}])
              
              
              for instance in realated_instances:
                  # Read the tag value containing EC2 instance IDs separated at commas
                  tags = instance.tags
                  for tag in tags:
                      if tag['Key'] == find_sid + ":related":
                          instance_ids = tag['Value'].replace(' ', '').split(',')
              
                          print(f"Related instances: {instance_ids}")
                          
                          if start_stop_word == "Start":
                              ec2.instances.filter(InstanceIds=instance_ids).start()
                              print(f"Starting the related instances: {instance_ids}")
                          elif start_stop_word == "Stop":
                              ec2.instances.filter(InstanceIds=instance_ids).stop()
                              print(f"Stopping the related instances: {instance_ids}")

                          break
              
              message = f"The system {find_sid} will now be {start_stop_word} at {customer_name}. Initiated by {from_email}"
              sns.publish(TopicArn=sns_topic_arn, Message=message)
              
              return f"{start_stop_word} {find_sid}"


          def delete_object_from_s3(s3key):
              s3 = boto3.client("s3")
              print("Purge file Mail from S3")
              response = s3.delete_object(Bucket=os.environ['UPLOAD_BUCKET'], Key=s3key)
              print(response)
              return response


  SAPStartStopExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "SAPStartStopExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "SAPStartStop"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ec2:DescribeInstanceStatus'
                  - 'ec2:StartInstances'
                  - 'ec2:StopInstances'
                  - 'ec2:DescribeInstances'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'kms:Decrypt'
                  - 'kms:CreateGrant'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'ssm:StartAutomationExecution'
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/ssmsapstartstop:*"
              - Effect: 'Allow'
                Action:
                  - "ssm:StartAutomationExecution"
                  - "ssm:DescribeAutomationExecutions"
                  - "ssm:GetAutomationExecution"
                  - "ssm:SendCommand"
                  - "ssm:ListCommands"
                  - "ssm:ListCommandInvocations"
                  - "ssm:GetCommandInvocation"
                  - "ssm:DescribeInstanceInformation"
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'sns:Publish'
                Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:SSMSAPStartStopNotifications"
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                  - 's3:DeleteObject'
                Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"
  LambdaFunctionPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn: SAPStartStopLambdaFunction
    Properties:
      FunctionName: !Ref SAPStartStopLambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${S3BucketName}"